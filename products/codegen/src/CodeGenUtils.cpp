/*
    CodeGenUtils.cpp
    

*/
//----------------------------------------
//CodeGenUtils.cpp generated by cbtek on 06-04-2017 at 09:31:55 PM
//----------------------------------------

#include "CodeGenUtils.h"

#include "utility/inc/StringUtils.hpp"
#include "utility/inc/FileUtils.hpp"

using namespace cbtek::common::utility;

namespace cbtek {
namespace products {
namespace codegen {

void CodeGenUtils::generateLibraries(const std::vector<std::string> &dependLibs, const std::vector<std::string> &linkLibs, std::ostream &out)
{

    if (!dependLibs.empty())
    {
        std::string libs = StringUtils::vectorToString(dependLibs," ");
        out << "#==============================================================================" << std::endl;
        out << "# Add dependencies" << std::endl;
        out << "#==============================================================================" << std::endl;
        out << "add_dependencies (${CURR_TARGET} "+libs+")" << std::endl << std::endl;

    }

    if (!linkLibs.empty())
    {
        std::string libs = StringUtils::vectorToString(linkLibs," ");
        out << "#==============================================================================" << std::endl;
        out << "# Add libs to link with" << std::endl;
        out << "#==============================================================================" << std::endl;
        out << "target_link_libraries (${CURR_TARGET} "+libs+")" << std::endl;
    }
}

void CodeGenUtils::generateDirectories(const std::string &projectName, const std::string &path, const std::vector<std::string>& dirs)
{
    //Create directory structure for projects
    for(const auto& dir : dirs)
    {
        std::string dirToCreate = FileUtils::buildFilePath(path,projectName+"/"+dir);
        FileUtils::createDirectory(dirToCreate);
    }
}

}}}//end namespace


