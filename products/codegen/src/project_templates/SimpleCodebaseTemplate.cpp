/*
    SimpleCodebaseTemplate.cpp
    

*/
//----------------------------------------
//SimpleCodebaseTemplate.cpp generated by cbtek on 06-06-2017 at 11:14:22 AM
//----------------------------------------
#include "SimpleCodebaseTemplate.h"
#include "CodeGenUtils.h"

#include "utility/inc/StringUtils.hpp"
#include "utility/inc/FileUtils.hpp"
#include "utility/inc/SystemUtils.hpp"
#include "utility/inc/DateTimeUtils.hpp"
#include "utility/inc/STLUtils.hpp"

using namespace cbtek::common::utility;
using namespace cbtek::products::codegen;

namespace cbtek {
namespace products {
namespace codegen {
namespace project_templates {


SimpleCodebaseTemplate::SimpleCodebaseTemplate()
{

}

ProjectTemplateType SimpleCodebaseTemplate::getType() const
{
    return ProjectTemplateType::SimpleCodebase;
}

void SimpleCodebaseTemplate::createProject(const std::string &projectName,
                                           const std::string &rootFolderPath,
                                           const std::vector<std::string> &dependLibs,
                                           const std::vector<std::string> &linkLibs)
{
    std::string name = FileUtils::getSanitizedPathName(projectName);
    std::vector<std::string> dirs;
    dirs.push_back("common");
    dirs.push_back("products");
    dirs.push_back("cmake");
    CodeGenUtils::generateDirectories(name,rootFolderPath,dirs);

    std::ostringstream cmakeOut, buildModuleOut, flagsModuleOut;
    std::string cmakeListsPath = FileUtils::buildFilePath(rootFolderPath,name+"/CMakeLists.txt");
    std::string cmakeFlagsPath = FileUtils::buildFilePath(rootFolderPath,name+"/cmake/flags.cmake");
    std::string cmakeBuildPath = FileUtils::buildFilePath(rootFolderPath,name+"/cmake/build.cmake");
    cmakeOut << "#####################################################" << std::endl;
    cmakeOut << "#!This file was autogenerated by the CBTek CodeGen2 application" << std::endl;
    cmakeOut << "#####################################################" << std::endl;
    cmakeOut << "cmake_minimum_required(VERSION 3.0)" << std::endl;
    cmakeOut << "project("+name+")" << std::endl;
    cmakeOut << std::endl;
    cmakeOut << "set(LIBRARY_TYPE STATIC)" << std::endl;
    cmakeOut << std::endl;
    cmakeOut << "get_filename_component(PROJECT_ROOT ${CMAKE_CURRENT_BINARY_DIR} PATH)" << std::endl;
    cmakeOut << std::endl;
    cmakeOut << "set (CMAKE_MODULE_PATH \"${PROJECT_SOURCE_DIR}/cmake\")" << std::endl;
    cmakeOut << std::endl;
    cmakeOut << "include(${CMAKE_MODULE_PATH}/flags.cmake)" << std::endl;
    cmakeOut << "include(${CMAKE_MODULE_PATH}/build.cmake)" << std::endl;
    cmakeOut << std::endl;
    cmakeOut << "if (WIN32)" << std::endl;
    cmakeOut << "    set (PLATFORM WIN32)" << std::endl;
    cmakeOut << "endif()" << std::endl;
    cmakeOut << std::endl;
    cmakeOut << "include_directories(\"${PROJECT_SOURCE_DIR}/common\")" << std::endl;
    cmakeOut << "include_directories(\"${PROJECT_SOURCE_DIR}/products\")" << std::endl;
    cmakeOut << std::endl;
    cmakeOut << "#Added common utility" << std::endl;
    cmakeOut << "#Uncomment these lines when you clone these cbtek libs" << std::endl;
    cmakeOut << "#add_subdirectory(\"${PROJECT_SOURCE_DIR}/common/utility\")" << std::endl;
    cmakeOut << "#add_subdirectory(\"${PROJECT_SOURCE_DIR}/common/math\")" << std::endl;

    buildModuleOut << "# This file contains sets up the output direcetory for generated debug/release artifacts" << std::endl;
    buildModuleOut << "if(CMAKE_BUILD_TYPE MATCHES Debug)" << std::endl;
    buildModuleOut << "    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${PROJECT_ROOT}/bin/"+name+"/debug\")" << std::endl;
    buildModuleOut << "    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${PROJECT_ROOT}/bin/"+name+"/debug\")" << std::endl;
    buildModuleOut << "    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${PROJECT_ROOT}/bin/"+name+"/debug\")" << std::endl;
    buildModuleOut << "else()" << std::endl;
    buildModuleOut << "    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${PROJECT_ROOT}/bin/"+name+"/release\")" << std::endl;
    buildModuleOut << "    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${PROJECT_ROOT}/bin/"+name+"/release\")" << std::endl;
    buildModuleOut << "    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${PROJECT_ROOT}/bin/"+name+"/release\")" << std::endl;
    buildModuleOut << "endif()" << std::endl;

    flagsModuleOut << "# This file contains compiler flags for different platforms" << std::endl;
    flagsModuleOut << "if (WIN32)" << std::endl;
    flagsModuleOut << "    if (MSVC)" << std::endl;
    flagsModuleOut << "    else()" << std::endl;
    flagsModuleOut << "        set(CMAKE_CXX_FLAGS_RELEASE \"-Wl,--no-as-needed -std=c++0x -std=c++11 -D_GLIBCXX_USE_CXX11_ABI=0\")" << std::endl;
    flagsModuleOut << "        set(CMAKE_CXX_FLAGS_DEBUG \"-g -Wl,--no-as-needed -std=c++0x -std=c++11\")" << std::endl;
    flagsModuleOut << "    endif()" << std::endl;
    flagsModuleOut << "else()" << std::endl;
    flagsModuleOut << "    set(CMAKE_CXX_FLAGS_RELEASE \"-Wl,--no-as-needed -std=c++0x -std=c++11 -pthread -fPIC -ldl -D_GLIBCXX_USE_CXX11_ABI=0\")" << std::endl;
    flagsModuleOut << "    set(CMAKE_CXX_FLAGS_DEBUG \"-g -Wl,--no-as-needed -std=c++0x -std=c++11 -pthread -fPIC -ldl -D_GLIBCXX_USE_CXX11_ABI=0\")" << std::endl;
    flagsModuleOut << "endif()" << std::endl;

    FileUtils::writeFileContents(cmakeListsPath,cmakeOut.str());
    FileUtils::writeFileContents(cmakeFlagsPath,flagsModuleOut.str());
    FileUtils::writeFileContents(cmakeBuildPath,buildModuleOut.str());
}

SimpleCodebaseTemplate::~SimpleCodebaseTemplate()
{

}
}}}}//end namespace


