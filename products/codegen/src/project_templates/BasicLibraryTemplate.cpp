/*
    BasicLibraryTemplate.cpp
    

*/
//----------------------------------------
//BasicLibraryTemplate.cpp generated by cbtek on 06-04-2017 at 07:44:31 PM
//----------------------------------------
#include "BasicLibraryTemplate.h"

#include "utility/inc/StringUtils.hpp"
#include "utility/inc/FileUtils.hpp"
#include "utility/inc/SystemUtils.hpp"
#include "utility/inc/DateTimeUtils.hpp"
#include "utility/inc/STLUtils.hpp"
#include "CodeGenUtils.h"

using namespace cbtek::common::utility;
using namespace cbtek::products::codegen;

namespace cbtek {
namespace products {
namespace codegen {
namespace project_templates {


BasicLibraryTemplate::BasicLibraryTemplate()
{

}

ProjectTemplateType BasicLibraryTemplate::getType() const
{
    return ProjectTemplateType::BasicLibrary;
}

void BasicLibraryTemplate::createProject(const std::string &projectName,
                                         const std::string &rootFolderPath,
                                         const std::vector<std::string> &dependLibs,
                                         const std::vector<std::string> &linkLibs)
{
    std::string name = FileUtils::getSanitizedPathName(projectName);
    std::vector<std::string> dirs;
    dirs.push_back("inc");
    dirs.push_back("src");
    dirs.push_back("docs");
    dirs.push_back("tests");
    CodeGenUtils::generateDirectories(name,rootFolderPath,dirs);
    std::ostringstream cmakeOut;
    cmakeOut << "#==============================================================================" << std::endl;
    cmakeOut << "# CMakeLists library setup for " <<name<<" created by " << SystemUtils::getUserName() << " on " << DateTimeUtils::getDisplayTimeStamp() << std::endl;
    cmakeOut << "#==============================================================================" << std::endl;
    cmakeOut << "set(CMAKE_INCLUDE_CURRENT_DIR ON)" << std::endl;
    cmakeOut << "set(CURR_TARGET " << name << ")" << std::endl;
    cmakeOut << "set(CURR_TARGET_SOURCES \"${CURR_TARGET}_SOURCES\")" << std::endl;
    cmakeOut << "set(CURR_TARGET_HEADERS \"${CURR_TARGET}_HEADERS\")" << std::endl;
    cmakeOut << "include(${CMAKE_MODULE_PATH}/flags.cmake)" << std::endl;
    cmakeOut << std::endl;
    cmakeOut << "include_directories(inc)" << std::endl;
    cmakeOut << "include_directories(src)" << std::endl;
    cmakeOut << std::endl;
    cmakeOut << "if (${ENABLE_"+StringUtils::toUpper(name)+"_UNIT_TESTS})" << std::endl;
    cmakeOut << "    add_subdirectory(tests)" << std::endl;
    cmakeOut << "endif()" << std::endl;
    cmakeOut << std::endl;
    cmakeOut << "#==============================================================================" << std::endl;
    cmakeOut << "# Include Source Files" << std::endl;
    cmakeOut << "#==============================================================================" << std::endl;
    cmakeOut << "file(GLOB CURR_TARGET_SOURCES \"src/*.cpp\")" << std::endl;
    cmakeOut << "file(GLOB CURR_TARGET_HEADERS \"inc/*.h*\")" << std::endl;
    cmakeOut << std::endl;
    cmakeOut << "#==============================================================================" << std::endl;
    cmakeOut << "# Add Library" << std::endl;
    cmakeOut << "#==============================================================================" << std::endl;
    cmakeOut << "add_library(${CURR_TARGET}" << std::endl;
    cmakeOut << "            ${LIBRARY_MODE}" << std::endl;
    cmakeOut << "            ${CURR_TARGET_SOURCES}" << std::endl;
    cmakeOut << "            ${CURR_TARGET_HEADERS})" << std::endl;

    CodeGenUtils::generateLibraries(dependLibs,linkLibs,cmakeOut);

    //Save CMakeLists.txt file
    std::string cmakeListsPath = FileUtils::buildFilePath(rootFolderPath,name+"/CMakeLists.txt");
    FileUtils::writeFileContents(cmakeListsPath,cmakeOut.str());
}

BasicLibraryTemplate::~BasicLibraryTemplate()
{

}




}}}}//end namespace


